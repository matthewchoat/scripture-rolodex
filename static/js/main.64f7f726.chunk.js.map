{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","book","id","name","email","CardList","books","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredBooks","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAI,OACJC,IAAG,oBAAeH,EAAMI,KAAKC,GAA1B,uBAEP,mCAAML,EAAMI,KAAKE,KAAjB,OACA,kCAAKN,EAAMI,KAAKG,MAAhB,WCLKC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,MAAMC,KAAI,SAAAN,GAAI,OACjB,cAAC,EAAD,CAAoBA,KAAMA,GAAfA,EAAKC,WCLfM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCwCJG,E,kDA1Cb,aAAe,IAAD,8BACZ,gBAeFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdtC,EAAKC,MAAQ,CACXb,MAAO,GACPU,YAAa,IALH,E,qDAUhB,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,MAAOkB,S,oBAOxC,WACE,MAA+BC,KAAKN,MAA5Bb,EAAR,EAAQA,MAAOU,EAAf,EAAeA,YACTU,EAAgBpB,EAAMqB,QAAO,SAAA1B,GAAI,OACrCA,EAAKE,KAAKyB,cAAcC,SAASb,EAAYY,kBAG/C,OACE,sBAAK9B,UAAU,MAAf,UACE,qDACA,cAAC,EAAD,CACEW,YAAY,eACZC,aAAee,KAAKf,eAGtB,cAAC,EAAD,CAAUJ,MAAOoB,W,GAnCPI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.64f7f726.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img    \n            alt='book'\n            src={`books.img/${props.book.id}.png?size=120x120`} \n            />\n        <h2> {props.book.name} </h2>\n        <p> {props.book.email} </p>\n    </div>\n);","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css'\n\n\nexport const CardList = (props) => (\n    <div className='card-list'>\n        {props.books.map(book => (\n            <Card key={book.id} book={book} />\n    ))}\n  </div>\n);","import React from 'react';\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        className='search'\n        type='search' \n        placeholder={ placeholder }\n        onChange={ handleChange }\n    />\n)","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      books: [],\n      searchField: ''\n    };\n\n  }\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ books: users }));\n}\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { books, searchField } = this.state;\n    const filteredBooks = books.filter(book => \n      book.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n    return (\n      <div className=\"App\">\n        <h1> Scripture Rolodex </h1>\n        <SearchBox\n          placeholder='search books'\n          handleChange={ this.handleChange }\n        />\n       \n        <CardList books={filteredBooks} />\n        \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}